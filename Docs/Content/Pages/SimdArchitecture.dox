/** **********************************************************************
 * @page SimdArchitecture SIMD Specialization Arhicecture
 * 
 * # Introduction
 *
 * The SIMD sub-module defines a methodology to structure platform-
 * dependent CPU-specfic SIMD optimizations such that they are included 
 * in the project in a platform-independent manner. The system permits 
 * cleanly adding new SIMD ISAs to the application. These facilities are 
 * designed to minimize the effort for programmers to add new SIMD 
 * architectures and versions with minimal effort beyond the specific 
 * algorithm implementations.
 * 
 * There are two main parts of this system: the SIMD ISA tags and the 
 * SIMD ISA concepts. The two work together to support the easy addition 
 * of new algorithm specializations.
 * 
 * To function, the architecture requires the user define the 
 * preprocessor macro HAL_SIMD to specify which SIMD ISA is being used 
 * in the build. There will be an error and the code will not build 
 * should it not be defined. For example, on a Windows 10 build for 
 * standard PC architecture, your build system should include a definition 
 * such as the following: `HAL_SIMD=AVX2`. The following SIMD ISAs are 
 * currently supported:
 * 
 * @include{doc} Supported-SIMD-ISAs.txt
 * 
 * # SIMD ISA Tags
 * 
 * Each SIMD ISA gets its own tag. Unlike other engines, the presence  of
 * a SIMD ISA is not assumed given a CPU type or platform. Additionally, 
 * the SIMD ISA is not merely defined in a preprocessor macro, although 
 * one is used to define it. The SIMD architecture uses a hierarchy of 
 * tag classes to define the ISA present, e.g. there are a number of SSE 
 * tags as each generation gets its own tag: SSE, SSE2, etc. ISA tags 
 * publicly derive from the tag for its prior generation, e.g. SSE2 derives 
 * from SSE. For those tags that identify the first generation of a SIMD 
 * ISA, it is to derive from None to create a proper hierarchy.
 * 
 * The inheritence hierarchy permits each generation to inherit the 
 * implementation of data structures and algorithms of prior generations 
 * and only implement that which is new. For example, the Quat SSE2 
 * single-precision floating-point implementations are entirely inherited 
 * from the SSE implementation as the SSE2 contains no new instructions 
 * that could result in a more-optimized implementation.
 * 
 * # SIMD ISA Concepts
 * 
 * The multi-platform architecture relies not just on tags but also 
 * concepts that use those tags to enable proper function overloading. 
 * When a concept is defined it requires both a check of the previous 
 * generation's concept as well as a new restriction for this generation. 
 * This results in a narrower acceptance criteria and ensures that the 
 * most-recent generation of impelementation is chosen over a prior 
 * generation, instead of a compiler error due to ambiguous overloads.
 * 
 * @note The None tag is unique in that is does not have an associated 
 * concept. This is because there is no speciaiization for a lack of 
 * SIMD ISA. This situation is covered by the primary template definition.
 * 
 * # Implementing a New SIMD ISA
 *
 * ## Creating the tag and concept for a SIMD generation
 * 
 * For our example here, we'll look at defining SSE2, given that we 
 * already hava an SSE implementation.
 * 
 * ### 1. Define a tag to represent the SSE2 ISA
 * 
 * @code{.cpp}
 * class Sse2 : public Sse
 * {
 * };
 * @endcode
 * 
 * See the `Sse2` class publicly derives from `Sse`, the prior generation 
 * of ISA in the same SIMD family. This rule only applies if the new 
 * generation is backwards-compatible with the prior generation. If it is 
 * not, derive from None instead of the prior generation. If a new 
 * generation is not a strict superset of the old one, use caution as you 
 * can inherit from the older one if all its implementations use only 
 * those elements still present in the new generation.
 *  
 * ### 2. Define a concept for SSE2
 * 
 * @code{.cpp}
 * template<typename SIMD>
 * concept IsSse2 = IsSse<SIMD> && std::is_base_of_v<Sse2, SIMD>;
 * @endcode
 * 
 * Concepts check to see that types meet certain requirements. If not, 
 * the definition is considered invalid and can result in either a 
 * failed copmile or, as it is used here, in establishing precedence 
 * resulting in proper overload resolution.
 * 
 * The C++ standard dictates concepts cannot inherit from other concepts. 
 * Instead, they can reference other concepts in their requirements, 
 * resulting in their inclusion through composition. In this definition, 
 * the SSE2 concept first checks to see the SSE concept is satisfied. 
 * Then it determines if SSE2 is valid. It does so by checking to see if 
 * the SIMD tag is either the Sse2 tag or derived from it. Please note, 
 * the SIMD tag isn't checked because of the `SIMD` in the `is_base_of<>` 
 * type trait. That SIMD is a reference to the template parameter defined 
 * in the line above. The declaration of the specialized class or 
 * function will pass its tag into this concept as seen in the next 
 * section.
 * 
 * ## Using the tag and concept in specializations
 * 
 * ### Using the tag and concept in class specialization
 * 
 * After defining the tag and concept, they may be used to write 
 * implementations of algorithms that will slot right into the SIMD 
 * architecture and get used appropriately. In the library, the classes 
 * only define a minimal definition of mathematical entities. The 
 * albegraic and other numerical algorithms are defined in free functions.
 * To understand how it works, first look at the primary template 
 * declaration of the Quat class:
 * 
 * @code{.cpp}
 * template<typename S, typename I = ark::hal::simd::HAL_SIMD>
 * class Quat
 * @endcode
 * 
 * The `Quat`'s template clause has two parameters. The first, `S`, is 
 * the class used for each numeric element in the quaternion. The second, 
 * `I`, contains the SIMD ISA tag. It has a default parameter of 
 * `ark::hal::simd::HAL_SIMD`. The macro definition gets passed in as the 
 * default SIMD ISA. This causes `Quat<float>` to default to SSE2 in our 
 * example. If a function is not defined for `Quat<float, Sse2.` then it 
 * will revert to a definition of `Quat<float, SSE>` if present; 
 * otherwise, it will revert to the non-SIMD implementation in the 
 * primary template definition. The SIMD ISA tag should be the final 
 * parameter in the list as it is defaulted and normally will not be 
 * specified in application code.
 * 
 * The class will define the data. It's possible that the data format 
 * will change from one generation to another. For example, the double-
 * precision Quat data format changes between SSE and AVX generations. In 
 * the SSE generations it is two 128-bit data elements as each one can 
 * only hold 2 doubles, but a Quat has 4 elements. AVX introduced a 
 * 256-bit data type, so all the elements may be stored in a single new 
 * data element. Older functions will fail to compile when first 
 * creating a new class. There are two options:
 * 
 * 1. Re-implmeent all the algorithms with the new data type. This is 
 * the preferable situations; however, that might not be realistic 
 * should the code base grow to include many optimized functions.
 * 
 * 2. Add an implicit casting operator to the prior generation's format. 
 * This is sub-optimal and should be avoided as much as possible, but it 
 * will solve the problem of being unable to even compile without all 
 * algorithms used getting reimplmeneted. 
 * 
 * ### Using the tag and concept in function specialization
 * 
 * With the mechanics of class defintiions covered, it's time to look at 
 * the specialization of functions to write SIMD ISA specializations:
 * 
 * @code{.cpp}
 * 	template<ark::hal::simd::IsSse SIMD>
 * 	inline auto operator-(Quat<float, SIMD> q) -> Quat<float, SIMD>
 * @endcode
 * 
 * The concept gets used in the definition of the template parameter in a 
 * similar way to the class. It creates a strong partial ordering for 
 * overload resolution permitting inherting old implementations that are 
 * still valid and only writing new implementations when it's useful or 
 * necessary.
 * 
 * Notice the class is used in the result type. This is mandatory. If the 
 * result type were fixed to the generation of the definition, it will 
 * not function properly should a future generation try to use it. 
 * Template deduction rules require an exact match, not merely a base 
 * class object; therefore, in our example, an inherited SSE function 
 * would return a `Quat<float, Sse>` which would result in an error 
 * when that result is then used in another operation that's looking for 
 * a `Quat<float, Sse2>`.
 *
 * @author Noah Stein
 * @copyright Â© 2021 Noah Stein. All Rights Reserved.
 ************************************************************************/
